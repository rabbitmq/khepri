@author Jean-Sébastien Pédron <jean-sebastien@rabbitmq.com>
@author Karl Nilsson <nkarl@vmware.com>
@author The RabbitMQ team <info@rabbitmq.com>
@copyright 2021-2022 VMware, Inc. or its affiliates.  All rights reserved.
@title The Khepri Database
@version Development branch

@doc
Khepri is a tree-like replicated on-disk database library for Erlang and
Elixir.

Data are stored in a <strong>tree structure</strong>. Each node in the tree is
referenced by its path from the root node. A path is a list of Erlang atoms
and/or binaries. For ease of use, Unix-like path strings are accepted as well.

For <strong>consistency and replication</strong> and to manage data on disk,
Khepri relies on <a href="https://github.com/rabbitmq/ra">Ra</a>, an Erlang
implementation of the <a href="https://raft.github.io/">Raft consensus
algorithm</a>. In Ra parlance, Khepri is a state machine in a Ra cluster.

This page <strong>describes all the concepts in Khepri</strong> and points the
reader to the modules' documentation for more details.

<hr/>

== Why Khepri? ==

This started as an experiment to replace how data (other than message bodies)
are stored in the <a href="https://www.rabbitmq.com/">RabbitMQ messaging
broker</a>. Before Khepri, those data were stored and replicated to cluster
members using Mnesia.

Mnesia is very handy and powerful:
<ul>
<li>It comes out-of-the-box with the Erlang runtime and standard library.</li>
<li>It does all the heavy lifting and RabbitMQ just uses it as a key/value
store without thinking too much about replication.</li>
</ul>

However, recovering from any network partitions is quite difficult. This was
the primary reason why the RabbitMQ team started to explore other options.

Because RabbitMQ already uses an implementation of the Raft consensus algorithm
for its quorum queues, it was decided to leverage that library for all
metadata. That's how Khepri was borned.

Thanks to Ra and Raft, it is <strong>clear how Khepri will behave during and
recover from a network partition</strong>. This makes it more comfortable for
the RabbitMQ team and users, thanks to the absence of unknowns.

<blockquote>
At the time of this writing, RabbitMQ does not use Khepri in a production
release yet because this library and its integration into RabbitMQ are still a
work in progress.
</blockquote>

== The tree structure ==

=== Tree nodes ===

Data in Khepri are organized as <em>tree nodes</em> ({@link
khepri_machine:tree_node()}) in a tree structure. Every tree nodes have:
<ul>
<li>a <a href="#Node_ID">node ID</a></li>
<li>a <a href="#Payload">payload</a> (optional)</li>
<li><a href="#Properties">properties</a></li>
</ul>

```none
o
|
+-- orders
|
`-- stock
    |
    `-- wood
        |-- <<"mapple">> = 12
        `-- <<"oak">> = 41
'''

=== Node ID ===

A tree node name is either an Erlang atom or an Erlang binary ({@link
khepri_path:node_id()}).

=== Payload ===

A tree node may or may not have a payload. Khepri supports two types of
payload, the <em>data payload</em> and the <em>stored procedure payload</em>.
More payload types may be added in the future.

Payloads are represented using macros or helper functions:
<ul>
<li>`none' and {@link khepri:no_payload/0}</li>
<li>`#kpayload_data{data = Term}' and {@link khepri:data_payload/1}</li>
<li>`#kpayload_sproc{sproc = Fun}' and {@link khepri:sproc_payload/1}</li>
</ul>

Functions in {@link khepri_machine} have no assumption on the type of the
payload because they are a low-level API. Therefore, it must be specified
explicitly using the macros or helper functions mentioned above.

Most functions in {@link khepri}, being a higher-level API, target more
specific use cases and detect the type of payload.

=== Properties ===

Properties are:
<ul>
<li>The version of the payload, tracking the number of times it was modified
({@link khepri_machine:payload_version()}).</li>
<li>The version of the list of child nodes, tracking the number of times child
nodes were added or removed ({@link khepri_machine:child_list_version()}).</li>
<li>The number of child nodes ({@link khepri_machine:child_list_count()}).</li>
</ul>

=== Addressing a tree node ===

The equivalent of a <em>key</em> in a key/value store is a <em>path</em>
({@link khepri_path:path()}) in Khepri.

A path is a list of node IDs, from the root (unnamed) tree node to the target
({@link khepri_path:path()}). For instance:
```
%% Points to "/:stock/:wood/oak" in the tree showed above:
Path = [stock, wood, <<"oak">>].
'''

It is possible to target multiple tree nodes at once by using a <em>path
pattern</em> ({@link khepri_path:pattern()}). In addition to node IDs, path
patterns have conditions ({@link khepri_condition:condition()}). Conditions allow things like:
<ul>
<li>checking the existence of a tree node</li>
<li>targeting all child nodes of a tree node</li>
<li>matching on node IDs using a regex</li>
<li>matching on the data payload</li>
</ul>

For instance:
```
%% Matches all varieties of wood in the stock:
PathPattern = [stock, wood, #if_node_matches{regex = any}].

%% Matches the supplier of oak if there is an active order:
PathPattern = [order,
               wood,
               #if_all{conditions = [
                 <<"oak">>,
                 #if_data_matches{pattern = {active, true}}]},
               supplier].
'''

Finally, a path can use some special path component names, handy when using
relative paths:
<ul>
<li>`?THIS_NODE' to point to self</li>
<li>`?PARENT_NODE' to point to the parent tree node</li>
<li>`?ROOT_NODE' to explicitly point to the root unnamed node</li>
</ul>

Relative paths are useful when putting conditions on
<a href="#Tree_node_lifetime">tree node lifetimes</a>.

=== Tree node lifetime ===

A tree node's lifetime starts when it is inserted the first time, until it is
removed from the tree. However, intermediary tree nodes created on the way
remain in the tree long after the leaf node was removed.

For instance, when `[stock, wood, <<"walnut">>]' was inserted, the intermediary
tree nodes `stock' and `wood' were created if they were missing. After
`<<"walnut">>' is removed, they will stay in the tree with possibly neither
payload nor child nodes.

Khepri has the concept of <em>`keep_while' conditions</em>. A `keep_while'
condition is like the conditions which can be used inside path pattern. When a
node is inserted or updated, it is possible to set `keep_while' conditions:
when these conditions evaluate to false, the tree node is removed from the
tree.

For instance, it is possible to set the following condition on `[stock, wood]'
to make sure it is removed after its last child node is removed:
```
%% We keep [stock, wood] as long as its child nodes count is strictly greater
%% than zero.
KeepWhileCondition = #{[stock, wood] => #if_child_list_length{count = {gt, 0}}}.
'''

`keep_while' conditions on self (like the example above) are not evaluated on
the first insert though.

== Khepri API ==

=== High-level API ===

A high-level API is provided by the {@link khepri} module. It covers most
common use cases and should be straightforward to use.

```
khepri:insert([stock, wood, <<"lime tree">>], 150),

Ret = khepri:get([stock, wood, <<"lime tree">>]),
{ok, #{[stock, wood, <<"lime tree">>] =>
       #{child_list_count => 0,
         child_list_version => 1,
         data => 150,
         payload_version => 1}}} = Ret,

true = khepri:exists([stock, wood, <<"lime tree">>]),

khepri:delete([stock, wood, <<"lime tree">>]).
'''

=== Low-level API ===

The high-level API is built on top of a low-level API. The low-level API is
provided by the {@link khepri_machine} module.

The low-level API provides just a handful of primitives. More advanced or
specific use cases may need to rely on that low-level API.

```
%% Unlike the high-level API's `khepri:insert/2' function, this low-level
%% insert returns whatever it replaced (if anything). In this case, there was
%% nothing before, so the returned value is empty.
Ret1 = khepri_machine:put(
         StoreId, [stock, wood, <<"lime tree">>],
         #kpayload_data{data = 150}),
{ok, #{}} = Ret1,

Ret2 = khepri_machine:get(StoreId, [stock, wood, <<"lime tree">>]),
{ok, #{[stock, wood, <<"lime tree">>] =>
       #{child_list_count => 0,
         child_list_version => 1,
         data => 150,
         payload_version => 1}}} = Ret2,

%% Unlike the high-level API's `khepri:delete/2' function, this low-level
%% delete returns whatever it deleted.
Ret3 = khepri_machine:delete(StoreId, [stock, wood, <<"lime tree">>]),
{ok, #{[stock, wood, <<"lime tree">>] =>
       #{child_list_count => 0,
         child_list_version => 1,
         data => 150,
         payload_version => 1}}} = Ret3.
'''

=== Stores ===

It is possible to have multiple database instances running on the same Erlang
node or cluster.

By default, Khepri starts a default store, based on Ra's default system.

== Transactions ==

=== Restrictions ===

On the surface, Khepri transactions look like Mnesia ones: they are anonymous
functions which can do any arbitrary operations on the data and return any
result. If something goes wrong or the anonymous function aborts, nothing is
committed and the database is left untouched as if the transaction code was
never called.

Under the hood, there are several restrictions and caveats that need to be
understood in order to use transactions in Khepri:
<ul>
<li>If the anonymous function only <strong>reads data</strong> from the tree,
there is no specific restrictions on them.</li>
<li>If however the anonymous function needs to <strong>modify or
delete</strong> data from the database, then the constraints described in the
next section need to be taken into account.</li>
</ul>

The nature of the anonymous function is passed as the `ReadWrite' argument to
{@link khepri:transaction/3} or {@link khepri_machine:transaction/3}
functions.

=== The constraints imposed by Raft ===

The Raft algorithm is used to achieve consensus among Khepri members
participating in the database. Khepri is a state machine executed on each Ra
node and all instances of that Khepri state machine start with the same state
and modify it identically. The goal is that, after the same list of Ra
commands, all instances have the same state.

When a new Ra node joins the cluster and therefore participates to the Khepri
database, it starts a new Khepri state machine instance. This instance needs to
apply all Ra commands from an initial state to be on the same page as other
existing instances.

Likewise, if for any reason, one of the Khepri state machine instance looses
the connection to other members and can't apply Ra commands, then when the link
comes back, it has to catch up.

All this means that the code to modify the state of the state machines (i.e.
the tree) needs to run on all instances, possibly not at the same time, and
give the exact same result everywhere.

=== The problem with anonymous functions ===

This is fine for inserts and deletes because the code is part of Khepri and is
deterministic. This poses a problem when transactions are anonymous functions
outside of Khepri's control:
<ol>
<li>Khepri must be able to store the anonymous function as a Ra command in Ra's
log. This is the basis for replication and is mandatory to add a new cluster
member or for a lagging member to catch up.</li>
<li>The anonymous function must produce exactly the same result in all state
machine instances, regardless of the time it runs, the availability of other
Erlang modules, the state of Erlang processes, files on disk or network
connections, and so on.</li>
</ol>

To achieve that, {@link khepri_fun} and {@link khepri_tx} extract the assembly
code of the anonymous function and create a standalone Erlang module based on
it. This module can be stored in Ra's log and executed anywhere without the
presence of the initial anonymous function's module.

Here is what they do in more details:
<ol>
<li>The assembly code of the module hosting the anonymous function is
extracted.</li>
<li>The anonymous function code is located inside that assembly code.</li>
<li>The code is analyzed to determine:
<ul>
<li>that it does not perform any forbidden operations (sending or receiving
inter-process messages, use date and time, access files or network connections,
etc.)</li>
<li>what other functions it calls</li>
</ul></li>
<li>Based on the listed function calls, the same steps are repeated for all of
them (extract, verify, list calls).</li>
<li>Once all the assembly code to have a standalone anonymous function is
collected, an Erlang module is generated.</li>
</ol>

=== How to handle side effects? ===

The consequence of the above constraints is that a transaction function can't
depend on anything else than the tree and it can't have any side effects
outside of the changes to the tree nodes.

If the transaction needs to have side effects, there are two options:
<ul>
<li>Perform any side effects after the transaction.</li>
<li>Use {@link khepri_machine:put/3} with {@link
khepri_condition:if_payload_version()} conditions in the path and retry if the
put fails because the version changed in between.</li>
</ul>

Here is an example of the second option:

```
Path = [stock, wood, <<"lime tree">>],
{ok, #{Path := #{data = Term,
                 payload_version = PayloadVersion}}} =
  khepri_machine:get(StoredId, Path),

%% Do anything with `Term` that depend on external factors and could have side
%% effects.
Term1 = do_something_with_side_effects(Term),

PathPattern = [stock,
               wood,
               #if_all{
                 conditions = [
                   <<"lime tree">>,
                   #if_payload_version{version = PayloadVersion}]}],
Payload = #kpayload_data{data = Term1},
case khepri_machine:put(StoredId, PathPattern, Payload) of
    {ok, _} ->
        ok; %% `Term1` was stored successfully.
    {error, {mismatching_node, _}} ->
        loop() %% Restart the whole function to read/modify/write again.
end.
'''

== Stored procedures and triggers ==

=== Triggering a function after some event ===

It is possible to associate events with an anonymous function to trigger its
execution when something happens. This is what is usually called a
<em>trigger</em> in databases and Khepri supports this feature.

Currently, Khepri supports a single type of event, <em>tree changes</em>. This
event is emitted whenever a tree node is being created, updated or deleted.

Here is a summary of what happens when such an event is emitted:
<ol>
<li>Khepri looks up any <em>event filters</em> which could match the emitted
event.</li>
<li>If one or more event filters are found, their corresponding stored
procedures are executed.</li>
</ol>

The indicated stored procedure must have been stored in the tree first.

=== Storing an anonymous function ===

This is possible to store an anonymous function as the payload of a tree node
using the {@link khepri_machine:payload_sproc()} record:

```
khepri_machine:put(
  StoreId,
  StoredProcPath,
  #kpayload_sproc{sproc = fun() -> do_something() end}))}.
'''

The `StoredProcPath' can be <a href="#Addressing_a_tree_node">any path in the
tree</a>.

Unlike transaction functions, a stored procedure has no restrictions on what
it is allowed to do. Therefore, a stored procedure can send or receive
messages, read or write from a disk, generate random numbers and so on.

A stored procedure can accept any numbers of arguments too.

It is possible to execute a stored procedure directly without configuring any
triggers. To execute a stored procedure, you can call {@link
khepri_machine:run_sproc/3}. Here is an example:

```
Ret = khepri_machine:run_sproc(
        StoreId,
        StoredProcPath,
        [] = _Args).
'''

This works exactly like {@link erlang:apply/2}. The list of arguments passed
to {@link khepri_machine:run_sproc/3} must correspond to the stored procedure
arity.

=== Configuring a trigger ===

Khepri uses <em>event filters</em> to associate a type of events with a stored
procedure. Khepri supports tree changes events and thus only supports a single
event filter called {@link khepri_machine:event_filter_tree()}.

An event filter is registered using {@link khepri_machine:register_trigger/4}:

```
EventFilter = #kevf_tree{path = [stock, wood, <<"oak">>],  %% Required
                         props = #{on_actions => [delete], %% Optional
                                   priority => 10}},       %% Optional

ok = khepri_machine:register_trigger(
       StoreId,
       TriggerId,
       EventFilter,
       StoredProcPath))}.
'''

In this example, the {@link khepri_machine:event_filter_tree()} record only
requires the path to monitor. The path can be any path pattern and thus can
have conditions to monitor several nodes at once.

The `on_actions' property is optional. By default the event filter matches all
tree changes (`create', `update' or `delete').

The `priority' property is also optional and defaults to 0. When several event
filters match a given event, they are sorted by priority (a greater integer
means the event filter will be considered first), then by `TriggerId' in
alphabetical order.

Neither the monitored path nor the stored procedure (pointed to by
`StoredProcPath') need to exist when the event filter is registered. If the
stored procedure doesn't exist when an event occurs, the event filter is
simply ignored. A stored procedure can change after an event filter is
registered as well.

The stored procedure used for a trigger must accept a single argument, a map
containing properties of the emitted event:

```
my_stored_procedure(Props) ->
    #{path := Path},
      on_action => Action} = Props.
'''

`Path' is the path to the tree node created, updated or deleted.

`Action' is the nature of the change (`create', `update' or `delete').

The return value of this stored procedure is ignored in the context of a
trigger.

=== Execution guaranties ===

The stored procedure associated with a trigger (event filter) is executed on
the Ra leader node.

If the stored procedure throws an exception, it is logged and there is no
retry.

There is an internal ack mechanism to make sure the stored procedure is
executed at least once. Therefore, if the Ra leader changes before the
execution of the stored procedure could be confirmed to the Khepri state
machine, the execution will be retried on the new Ra leader.

This means that the stored procedure could be executed multiple times.
Therefore it is important it is idempotent.

=== Differences with triggers in RDBMS ===

As described earlier, the rationale for triggers in Khepri is that sometimes,
one needs to execute some code with side effects (e.g. sending a message to a
process) after a record was modified in the database. This can't happen in a
transaction because side effects are forbidden. The caller could handle that
after he modifies the record, but the record could be indirectly modified
(deleted) as a consequence of another record being modified or deleted. In
this case, the caller can't do anything.

Because of the freedom they need, <strong>triggers are not allowed to mess
with the database directly</strong>. In other words, they must go through the
regular Khepri API like any caller. Triggers do not have any privileges or
blanket approvals to tamper with the data.

So even though Khepri uses the same naming than many RDBMS, triggers in Khepri
can't have unexpected consequences.
