name: Test

on:
  - pull_request
  - push

jobs:
  Test:
    name: Test on Erlang/OTP ${{ matrix.beam_versions.otp }}, Elixir ${{ matrix.beam_versions.elixir }} and ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        beam_versions:
          - otp: 23
            elixir: '1.11.4'
          - otp: 24
            elixir: '1.13.4'
          # - otp: '25.0-rc3'
          #   elixir: '1.13.4'
        os: [ubuntu-latest, windows-latest]

    env:
      RUN_DIALYZER_ON_OTP_RELEASE: 24

    steps:
      - uses: actions/checkout@v2
      - uses: erlef/setup-beam@v1
        id: install-erlang
        with:
          otp-version: ${{ matrix.beam_versions.otp }}
          elixir-version: ${{ matrix.beam_versions.elixir }}
          rebar3-version: '3.18.0'

      - name: Restore Dialyzer PLT files from cache
        uses: actions/cache@v2
        if: ${{ matrix.beam_versions.otp == env.RUN_DIALYZER_ON_OTP_RELEASE && matrix.os == 'ubuntu-latest' }}
        with:
          path: _build/*/rebar3_*_plt
          key: dialyzer-plt-cache-${{ steps.install-erlang.outputs.otp-version }}-${{ runner.os }}-${{ hashFiles('rebar.config*') }}-v1

      - name: Compile
        run: rebar3 compile

      - name: Xref
        run: rebar3 xref
      - name: EUnit
        run: rebar3 eunit --verbose --cover
      - name: PropEr
        run: rebar3 proper --verbose --cover
      - name: Coveralls
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COVERALLS_FLAG_NAME: Erlang/OTP ${{ matrix.beam_versions.otp }} on ${{ matrix.os }}
        run: rebar3 as test coveralls send

      - name: Dialyzer
        if: ${{ matrix.beam_versions.otp == env.RUN_DIALYZER_ON_OTP_RELEASE && matrix.os == 'ubuntu-latest' }}
        run: rebar3 clean && rebar3 as test dialyzer

      - name: Get Elixir dependencies
        run: mix deps.get
      - name: ExUnit
        run: mix test

  Finish:
    name: Finishing
    needs: [Test]
    runs-on: ubuntu-latest
    steps:
      - name: Coveralls finished
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          curl -v -k https://coveralls.io/webhook \
            --header "Content-Type: application/json" \
            --data "{\"repo_name\":\"$GITHUB_REPOSITORY\",\"repo_token\":\"$GITHUB_TOKEN\",\"payload\":{\"build_num\":$GITHUB_RUN_NUMBER,\"status\":\"done\"}}"
